  <script src="/src/js/views_app.js"> </script>
'use strict'            ВКЛЮЧЕНИЕ СТРОГОГО РЕЖИМА, ЧТОБЫ НЕ ЗАБЫВАЛ ЮЗАТЬ
                           ПРИСВОЕНИЕ ПЕРЕМЕННОЙ
                           ПРИМЕР:
                           НЕПРАВИЛЬНО let massage = 'Привет'
                                       console.log (massage)
                           ПРАВИЛЬНО   massage = 'Привет'
                                       console.log (massage)

 ТИПЫ ДАННЫХ В JS-------------------------------------------------------------------------------------------------------
1.СТРОКА 2.ЧИСЛО 3.БУЛЕВОЕ ЗНАЧЕНИЕ 4.ОБЪЕКТ 5.МАССИВ
1. const string = 'строка'
2. const number = 123
3. boolean = true/false
4. const obj = {
    name: 'John',
    age: 24,
    maried: false
};
console.log(obj.name, obj.age); ПРОЩЕ ЗАПИСЫВАТЬ ЧЕРЕЗ ТОЧКУ

console.log(obj ['name'], obj['age']); НО МОЖНО И БЕЗОПАСНЕЕ ЧЕРЕЗ КВАДРАТ СКОБКИ

5. const array = [123, {key: "value"}, 3, 'строка', 5]

let arr = [123, {key: "value"}, 3, 'строка', 5]
console.log(arr[2]);
ТИПЫ ПЕРЕМЕННЫХ---------------------------------------------------------------------------------------------------------
const - ПОСТОЯННАЯ ПЕРЕМЕННАЯ
const name = 'Александ'
const admin = name
console.log (admin)

let - ИЗМЕНЯЕМАЯ ПЕРЕМЕННАЯ
let massage = 'Привет'
massage = 'Пока'
console.log (massage)

ЕЁ НЕЛЬЗЯ ПЕРЕОБРЕДЕЛИТЬ
const name = 'Александ'
name= 'Петя'
console.log (name)
TypeError: Assignment to constant variable.

var - ГЛОБАЛЬНАЯ ПЕРЕМЕННАЯ
  


Интерполяция------------------------------------------------------------------------------------------------------------
const category = 'toys'

console.log('https://someurl.com/' + category + '/'+'4'); Старый способ оформления

console.log(`https://someurl.com/${category}/5`); Новый способ оформления
ОТВЕТ: https://someurl.com/toys/5

const user ='Ivan'
alert(`Привет, ${user}`)


Операторы---------------------------------------------------------------------------------------------------------------
1)+ и -
let incr = 10,
    decr = 10;
incr++; оператор инкримента т.е увеличение на единицу 10+1=11
decr--; оператор декримента т.е. уменьтшение на единицу 10-1=9
console.log(incr);
console.log(decr);
ответ:
11
9

Префиксная форма записи
++incr;
++decr;
Постфиксная форма записи
incr++;
decr--;

2) = == ===
= присваивание

== равенство. Равно ли число 8 к 8
console.log(2*4 == 8); тут мы хотип узнать что 2*8 действительно равно 8 и если да то будет true

=== строгое равенство по типу (чтобы понять что конечный результат равен строго числу или строке)
console.log(2*4 === 8); тут восьмерка это число  поэтому ответ будет true т.к. 8 это числовое значение
console.log(2*4 === '8'); тут восьмерка это строка  поэтому ответ будет false т.к. 8 это строка

3) && ||
&& И  Работает только тогда когда у нас 2 или более правдивых выражения
const isCheked = true,
      isClosed = true;
console.log(isCheked && isClosed ); два условия правдивы поэтому ответ будет true,
если второе условие будет isClosed = false то ответ будет false т.к. не выполнены условия

|| или  Работает только тогда когда у нас хоть 1 выражение правдиво
const isCheked = true,
      isClosed = false;
console.log(isCheked || isClosed ); первое условие правдиво поэтому ответ будет true,
если второе условие будет isClosed = false то ответ будет true т.к. выполнены условия

4) !
! Оператор отрицания, если была правда то станет ложь и наоборот
const isCheked = false,
      isClosed = false;
console.log(isCheked || !isClosed );
Ответ будет true т.к. есть отрицание что это ложь во втором значении !isClosed

GIT---------------------------------------------------------------------------------------------------------------------

git init Инициализация гита
git config --local user.name 'Kiril' Локальная регистрация пользователя
git config --local user.email @example@gmail.com Локальная регистрация имейла пользователя
git config --global  user.name 'Kiril' Глобальная регистрация пользователя
git config --global  user.email @example@gmail.com Глобальная регистрация имейла пользователя

git status  Проверка статуса
git add -A  Добавление всех файлов в отслеживание гита
git add css.css  Добавление одного файла в отслеживание гита
git commit -a -m"Описываешь какие изменения были выполнены"
git log Проверка комиов гита что и когда и кем было сделано

git remote add origin https://github.com/HI4AN/gdfghd.git Это из самого гита (сайта)
делается только тогда когда юзаем в первый раз
git push -u origin master пуш первый
git push пуш

git branch Узнать какой путь main или master
git remote remove origin  Отвязка локального гита

Команды терминала для модальных браузерных окон-------------------------------------------------------------------------
prompt
const number0fFilms = +prompt('Сколько фильмов вы уже посмотрели?', '')  '' нужен для того чтобы появилось окно для ввода
+ prompt плюс ставится потому что будем работать с числом

Условия "если"----------------------------------------------------------------------------------------------------------
if (4 == 9) {        в if выполняется условие правда или ложь (4==9 ложь)
    console.log('Ok');
} else {             если первое условие не выполнилось и мы хотим добавить след действие то пишем else
    console.log('error');
}

const num = 50;
if (num < 49) {       Первое условие и оно ложь
    console.log('Error');
} else if (num > 100){  Второе учловие 
    console.log('Много');
} else {
    console.log('Ok');
}

-------------------Тирнарный оператор
const num = 50;
(num === 50) ? console.log('Ok') : console.log('Error'); Как выглядит запись тирнарного оператора
(num === 50) Это условие при котором проверяем что num ровно 50
 и если это условие верно ? то выполняем console.log('Ok')
 а если это условие не верно : то выполняем console.log('Error')

---------------------switch
Модификация if которая поддерживает несколько условий или строгих сравнений, так же это работает со строками
const num = 50;
switch (num){             // В скобках () после swith мы задаём переменную которую будем проверять или сравнивать. В фигурных скобках мы осуществляем проверки {}
  case 49:                // В case начинается строгая проверка равен ли num 49
  console.log('Неверно'); // В cl пишем что если условие не верно то выдай нам  console.log('Неверно');
  break;                  // Обязательная синтаксическая конструкция которая нужна после каждого действия. Если num=49 и условие ложь то пойдёт прогонка след кейсов, если num = 50 то break остановит процес

  case 100:
  console.log('Неверно');
  break;

  case 50:
  console.log('В точку!');
  break;

  default:                 // Мы используем default который выполнит действие по умолчанию если не один кейс не сработал
  console.log('Не в этот раз!');
  break;
}

Логические операторы----------------------------------------------------------------------------------------------------
Динамическая типизация
const hambuger = 5;
const fries = 9;
if (hambuger && fries) {
    console.log('Я сыт!');
}
console.log((hambuger && fries)); Чтобы проверить правда это или ложь или что выведится из условия мы закидываем условие в cl и оборачиваем скобками
1 2 3 и т.д.   Всегла правда true

0              Это всё неправда false
''
NaN
null
undefined

Работа оператора &&
Он останавыливает проверку после того как стокнётся с false или выводит последнее правдивое значение
console.log(1 && 0); Ответ 0  тут прочитал 1 и пошёл дальше столкнулся с 0 и т.к. это false он вывел последнее значение 0
console.log(1 && 5); Ответ 5  тут прочитал 1 и пошёл дальше, увидел 5 и просчёт был окончен и он вывел последнее значение правды 5
console.log(null && 5); Ответ null тут сразу столкнулся с false и остановился и вывкл его в ответ
console.log(0 && 'gfdgdfgdfkljmgkldf'); 0 так же как и в предыдущем случае

И&& запинается на лжи а ИЛИ|| запинается на правде

Работа оператора ||
Как только в условии оператор находит правду он перестаёь работать  
Если в условии всё непрада то возвразается последнее ложное значение 
const hambuger = 0;
const fries = null;
const cola = 0;
if (hambuger || fries|| cola) {
    console.log('Все ловольны');
} else {
    console.log('Уходим');
}
console.log((hambuger || cola || fries));

Должно быть хотябы одно правдивое условие  fries = 1 чтобы он работал
const hambuger = 0;
const fries = 1;
const cola = 0;
if (hambuger || fries|| cola) {
    console.log('Все довольны');
} else {
    console.log('Уходим');
}
console.log((hambuger || fries|| cola));

Если непрада  hambuger === 3 && cola === 2  и правда fries === 3 && nuggets то вернёт последнее правдивое значение nuggets = 2
const hambuger = 3;
const fries = 3;
const cola = 0;
const nuggets = 2;
if (hambuger === 3 && cola === 2 || fries === 3 && nuggets) {  Можно и так же писать nuggets главное что в нём есть значение 2 и оно правда
    console.log('Все довольны');
} else {
    console.log('Уходим');
}
console.log((hambuger === 3 && cola === 2 || fries === 3 && nuggets)); ответ 2 

Циклы---------------------------------------------------------------------------------------------------------------------------
----------------Обычный цикл while
let num = 50;
while (num < 55){       Пока выполняется условие в скобке (num меньше 55) будет выполняется условие num++ (это условие прибавляет +1 к 50)
    console.log(num);   Пока cl в { } то он выполняет цикл while, если вытащить его за скобки то он просто покажет num =50. Если cl будет находится ниже строки num++; то ответ будет 55 а не 54  
    num++;    
};

-----------------Цикл do 
При помощи него мы можем заставить что то сделать, а потом проверить условие и если необходимо выйти из цикла 
let num = 50;
do {
    console.log(num);
    num++; 
}
while (num < 55);

------------------Цико for
for (let i = 1; i < 8; i++) {    Задаём переменнуюю let i = 1  где i иттератор, 
  console.log(i);                после ; задаём условие i < 8 при котором цикл остановит свою работу
}                                i++ шаг цикла, отбозначает что будет происходить в каждом цикле   

for (let i = 1; i <= 8; i++) {  Чтобы прервать цикл используем break
  console.log(i); 
  if (i === 6) {                Когда i будет равна 6 цикл остановится
    break;
  } 
} 


for (let i = 1; i <= 8; i++) {  Чтобы прервать цикл используем break 
  if (i === 6) {                
    continue;                   Благодаря continue; мы пропускаем тот шаг который нам не нужен и ответ будет 1 2 3 4 5 7 8 
  }                             6 уйдёт из ответа 
    console.log(i);
} 

------------Цикл в цикле 
for (let i = 0; i < 3; i++) {            1й цикл 
    console.log(i); 
    for (let j = 0; j < 3; j++) {        2й цикл 
       console.log(j);                
    }                 
};   
               0  1й цикл 
zadachi.js:137 0  2й цикл
zadachi.js:137 1  2й цикл
zadachi.js:137 2  2й цикл
zadachi.js:135 1  1й цикл 
zadachi.js:137 0  2й цикл
zadachi.js:137 1  2й цикл
zadachi.js:137 2  2й цикл
zadachi.js:135 2  1й цикл 
zadachi.js:137 0  2й цикл
zadachi.js:137 1  2й цикл
zadachi.js:137 2  2й цикл

------------Ёлочка
for (let i = 1; i <= 4; i++) {
  let row = '';
  for (let j = 1; j <= i; j++) {
    row += '*';
  }
  console.log(row);
};

------------Метка

first: for (let i = 0; i < 3; i++) {                  first:  Это метка       
    console.log(`First level: ${i}`); 
        for (let j = 0; j < 3; j++) {        
            console.log(`Secomd level: ${j}`);                
        } 
            for (let k = 0; k < 5; k++) {
              if (k === 2) continue first;            continue first;  данная метка в цикле говорит чтобы код остановился на когда к=2 и началал цикл с того места где мы в первый раз выше указали first    
                console.log(`Third level: ${k}`);                
            }                 
};

first: for (let i = 0; i < 3; i++) {                  first:  Это метка
    console.log(`First level: ${i}`);
        for (let j = 0; j < 3; j++) {
            console.log(`Second level: ${j}`);
        }
            for (let k = 0; k < 5; k++) {
              if (k === 2) break first;                break first;  Полностью остановит цикл
                console.log(`Third level: ${k}`);
            }
};



Метод trim--------------------------------------------------------------------------------------------------------------
          const yyy = ' dsd '
          console.log(yyy.trim())   trim()  Убирает пробелы






